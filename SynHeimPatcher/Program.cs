using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Cache;

namespace SynHeimPatcher
{
    public class Program
    {
        static Lazy<Settings> Settings = null!;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings(nickname: "Settings", path: "settings.json", out Settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "YourPatcher.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            // Ensure we have Heim.
            if (!state.LoadOrder.TryGetIfEnabled(Settings.Value.HeimEspName, out var heim))
            {
                throw new Exception($"Could not find {Settings.Value.HeimEspName}");
            }

            // Output keywords from map
            foreach (var entry in Settings.Value.KeywordToBookMapping)
            {
                var keyword = entry.Keyword?.FormKeyNullable?.ToString() ?? "NULL";
                var book = entry.Book?.FormKeyNullable?.ToString() ?? "NULL";

                Console.WriteLine($"{keyword}: {book}");
            }

            foreach (var cobjGetter in state.LoadOrder.PriorityOrder.ConstructibleObject().WinningOverrides())
            {
                // Ignore tempering recipes
                if (cobjGetter.EditorID == null || cobjGetter.EditorID.Contains("Temper", StringComparison.OrdinalIgnoreCase))
                {
                    continue;
                }

                // Ignore recipes which already include a condition for a Heim book record.
                if (cobjGetter.Conditions.Any(condition => IsHeimBookCondition(condition, state.LinkCache, heim.ModKey)))
                {
                    continue;
                }

                // Resolve created object record.
                if (!cobjGetter.CreatedObject.TryResolve<ISkyrimMajorRecordGetter>(state.LinkCache, out var record))
                {
                    continue;
                }

                // Ignore records without keywords.
                if (record is not IKeywordedGetter keyworded)
                {
                    continue;
                }
                
                // Ensure created object has keywords.
                if (keyworded == null || keyworded.Keywords == null || keyworded.Keywords.Count == 0)
                {
                    continue;
                }

                // Check for mapping entry that matches the record's keywords.
                var entry = Settings.Value.KeywordToBookMapping.FirstOrDefault(link1 => keyworded.Keywords.Any(link2 => link1.Keyword.FormKey == link2.FormKey));
                
                if (entry == null || entry.Book == null)
                {
                    continue;
                }

                var mappedRecord = entry.Book.Resolve(state.LinkCache);

                if (mappedRecord == null)
                {
                    continue;
                }

                Console.WriteLine($"Adding condition for {cobjGetter.EditorID} with Heim manual {mappedRecord.EditorID}");

                var cobj = state.PatchMod.ConstructibleObjects.GetOrAddAsOverride(cobjGetter);

                FunctionConditionData functionCondition = new()
                {
                    Function = Condition.Function.GetItemCount
                };

                functionCondition.ParameterOneRecord.FormKey = mappedRecord.FormKey;

                ConditionFloat hasItemCondition = new()
                {
                    CompareOperator = CompareOperator.GreaterThan,
                    ComparisonValue = 0,
                    Data = functionCondition,
                };

                cobj.Conditions.Add(hasItemCondition);
            }
        }

        /// <summary>
        /// Check if condition is a Heim book condition.
        /// </summary>
        /// <param name="condition"></param>
        /// <param name="linkCache"></param>
        /// <param name="heimModKey"></param>
        /// <returns></returns>
        public static bool IsHeimBookCondition(IConditionGetter condition, ILinkCache<ISkyrimMod, ISkyrimModGetter> linkCache, ModKey heimModKey)
        {
            if (condition.Data is not IFunctionConditionDataGetter fdata)
            {
                return false;
            }

            if (fdata.Function != Condition.Function.GetItemCount)
            {
                return false;
            }

            if (!fdata.ParameterOneRecord.TryResolve(linkCache, out var record))
            {
                return false;
            }

            return record.Registration.Name == "Book" && record.FormKey.ModKey == heimModKey;
        }
    }
}